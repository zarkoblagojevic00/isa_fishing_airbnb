// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("QuickActions", SourceFile="Features\\QuickActions.feature", SourceLine=0)]
    public partial class QuickActionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "QuickActions.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "QuickActions", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Create new Promo action", SourceLine=2)]
        public virtual void CreateNewPromoAction()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new Promo action", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("there was a test villa owner with mail \"testvillaowner@gmail.com\" in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.And("there was a villa in the database named \"Test Villa\" linked with villa owner with" +
                        " email \"testvillaowner@gmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
 testRunner.And("there were no quick actions nur reservations in past for the service \"Test Villa\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.And("there was a promo action for the service \"Test Villa\" lasting from \"1\" days from " +
                        "now until \"3\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.And("there was a reservation for the service \"Test Villa\" lasting from \"4\" days from n" +
                        "ow until \"6\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "BeginDaysAfterToday",
                            "7"});
                table12.AddRow(new string[] {
                            "EndDaysAfterToday",
                            "9"});
                table12.AddRow(new string[] {
                            "PricePerDay",
                            "5"});
                table12.AddRow(new string[] {
                            "Capacity",
                            "3"});
#line 9
 testRunner.And("a QuickActionParameter was created for the villa \"Test Villa\" with the following " +
                        "properties", ((string)(null)), table12, "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table13.AddRow(new string[] {
                            "HttpMethod",
                            "post"});
                table13.AddRow(new string[] {
                            "RelativeResourceUrl",
                            "/api/QuickAction/CreateNewQuickAction"});
                table13.AddRow(new string[] {
                            "CookieEmail",
                            "testvillaowner@gmail.com"});
#line 16
 testRunner.When("a request is sent to the API", ((string)(null)), table13, "When ");
#line hidden
#line 22
 testRunner.Then("a \"200\" status code should be received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.And("service with the name \"Test Villa\" should have the promo action with the properti" +
                        "es from current content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update existing Promo action that wasn\'t taken", SourceLine=24)]
        public virtual void UpdateExistingPromoActionThatWasntTaken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update existing Promo action that wasn\'t taken", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given("there was a test villa owner with mail \"testvillaowner@gmail.com\" in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.And("there was a villa in the database named \"Test Villa\" linked with villa owner with" +
                        " email \"testvillaowner@gmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("there were no quick actions nur reservations in past for the service \"Test Villa\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("there was a promo action for the service \"Test Villa\" lasting from \"1\" days from " +
                        "now until \"3\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("there was a reservation for the service \"Test Villa\" lasting from \"4\" days from n" +
                        "ow until \"6\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table14.AddRow(new string[] {
                            "BeginDaysAfterToday",
                            "1"});
                table14.AddRow(new string[] {
                            "EndDaysAfterToday",
                            "2"});
                table14.AddRow(new string[] {
                            "PricePerDay",
                            "5"});
                table14.AddRow(new string[] {
                            "Capacity",
                            "3"});
#line 31
 testRunner.And("a QuickActionParameter was created for the villa \"Test Villa\" with the following " +
                        "properties", ((string)(null)), table14, "And ");
#line hidden
#line 37
 testRunner.And("that QuickActionDTO had the PromoActionId set previously", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table15.AddRow(new string[] {
                            "HttpMethod",
                            "put"});
                table15.AddRow(new string[] {
                            "RelativeResourceUrl",
                            "/api/QuickAction/UpdateQuickAction"});
                table15.AddRow(new string[] {
                            "CookieEmail",
                            "testvillaowner@gmail.com"});
#line 39
 testRunner.When("a request is sent to the API", ((string)(null)), table15, "When ");
#line hidden
#line 45
 testRunner.Then("a \"200\" status code should be received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
 testRunner.And("service with the name \"Test Villa\" should have the promo action with the properti" +
                        "es from current content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update existin Promo action that is taken", SourceLine=47)]
        public virtual void UpdateExistinPromoActionThatIsTaken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update existin Promo action that is taken", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given("there was a test villa owner with mail \"testvillaowner@gmail.com\" in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.And("there was a villa in the database named \"Test Villa\" linked with villa owner with" +
                        " email \"testvillaowner@gmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And("there were no quick actions nur reservations in past for the service \"Test Villa\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("there was a promo action for the service \"Test Villa\" lasting from \"1\" days from " +
                        "now until \"3\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("previously created promo action was taken", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table16.AddRow(new string[] {
                            "BeginDaysAfterToday",
                            "1"});
                table16.AddRow(new string[] {
                            "EndDaysAfterToday",
                            "2"});
                table16.AddRow(new string[] {
                            "PricePerDay",
                            "5"});
                table16.AddRow(new string[] {
                            "Capacity",
                            "3"});
#line 54
 testRunner.And("a QuickActionParameter was created for the villa \"Test Villa\" with the following " +
                        "properties", ((string)(null)), table16, "And ");
#line hidden
#line 60
 testRunner.And("that QuickActionDTO had the PromoActionId set previously", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table17.AddRow(new string[] {
                            "HttpMethod",
                            "put"});
                table17.AddRow(new string[] {
                            "RelativeResourceUrl",
                            "/api/QuickAction/UpdateQuickAction"});
                table17.AddRow(new string[] {
                            "CookieEmail",
                            "testvillaowner@gmail.com"});
#line 62
 testRunner.When("a request is sent to the API", ((string)(null)), table17, "When ");
#line hidden
#line 68
 testRunner.Then("a \"400\" status code should be received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
