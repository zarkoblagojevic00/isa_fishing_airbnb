// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("GeneralService", SourceFile="Features\\GeneralService.feature", SourceLine=0)]
    public partial class GeneralServiceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GeneralService.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GeneralService", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Submitting a report", SourceLine=2)]
        public virtual void SubmittingAReport()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submitting a report", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("there was a test villa owner with mail \"testvillaowner@gmail.com\" in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.And("there was a villa in the database named \"Test Villa\" linked with villa owner with" +
                        " email \"testvillaowner@gmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
 testRunner.And("there were no quick actions nur reservations in past for the service \"Test Villa\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.And("there was a reservation for the service \"Test Villa\" lasting from \"-6\" days from " +
                        "now until \"-3\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "ReportText",
                            "testing submitting report feature"});
#line 8
 testRunner.And("the ReportDTO was created and linked to previously created reservation as content" +
                        " with following properties", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "HttpMethod",
                            "post"});
                table7.AddRow(new string[] {
                            "RelativeResourceUrl",
                            "/api/GeneralService/SubmitReport"});
                table7.AddRow(new string[] {
                            "CookieEmail",
                            "testvillaowner@gmail.com"});
#line 12
 testRunner.When("a request is sent to the API", ((string)(null)), table7, "When ");
#line hidden
#line 18
 testRunner.Then("a \"200\" status code should be received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.Then("a new report will be created for the service with name \"Test Villa\" in \"60\" secon" +
                        "ds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creating a reservation for user who has an overlapping reservation", SourceLine=20)]
        public virtual void CreatingAReservationForUserWhoHasAnOverlappingReservation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a reservation for user who has an overlapping reservation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given("there was a test villa owner with mail \"testvillaowner@gmail.com\" in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.And("there was a villa in the database named \"Test Villa\" linked with villa owner with" +
                        " email \"testvillaowner@gmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("there were no quick actions nur reservations in past for the service \"Test Villa\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "Email",
                            "testnormuser@gmail.com"});
                table8.AddRow(new string[] {
                            "Name",
                            "TestUser"});
                table8.AddRow(new string[] {
                            "Surname",
                            "TestUser"});
                table8.AddRow(new string[] {
                            "Password",
                            "tester"});
                table8.AddRow(new string[] {
                            "Address",
                            "test adr"});
#line 25
 testRunner.And("there was a normal user in the database with the following information", ((string)(null)), table8, "And ");
#line hidden
#line 32
 testRunner.And("there were no reservations for previously created user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("there was a reservation for previously created user lasting from \"1\" days from no" +
                        "w until \"5\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("there was a reservation for previously created user lasting from \"6\" days from no" +
                        "w until \"9\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "BeginDaysAfterToday",
                            "3"});
                table9.AddRow(new string[] {
                            "EndDaysAfterToday",
                            "6"});
                table9.AddRow(new string[] {
                            "PricePerDay",
                            "10"});
#line 35
 testRunner.And("a NewReservationParameter was created as content for the previously created user " +
                        "and service with name \"Test Villa\" with the following properties", ((string)(null)), table9, "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "HttpMethod",
                            "post"});
                table10.AddRow(new string[] {
                            "RelativeResourceUrl",
                            "/api/GeneralService/CreateReservationForUser"});
                table10.AddRow(new string[] {
                            "CookieEmail",
                            "testvillaowner@gmail.com"});
#line 41
 testRunner.When("a request is sent to the API", ((string)(null)), table10, "When ");
#line hidden
#line 47
 testRunner.Then("a \"400\" status code should be received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creating a reservation for user who has no overlapping reservations", SourceLine=48)]
        public virtual void CreatingAReservationForUserWhoHasNoOverlappingReservations()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a reservation for user who has no overlapping reservations", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
 testRunner.Given("there was a test villa owner with mail \"testvillaowner@gmail.com\" in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.And("there was a villa in the database named \"Test Villa\" linked with villa owner with" +
                        " email \"testvillaowner@gmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("there were no quick actions nur reservations in past for the service \"Test Villa\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "Email",
                            "testnormuser@gmail.com"});
                table11.AddRow(new string[] {
                            "Name",
                            "TestUser"});
                table11.AddRow(new string[] {
                            "Surname",
                            "TestUser"});
                table11.AddRow(new string[] {
                            "Password",
                            "tester"});
                table11.AddRow(new string[] {
                            "Address",
                            "test adr"});
#line 53
 testRunner.And("there was a normal user in the database with the following information", ((string)(null)), table11, "And ");
#line hidden
#line 60
 testRunner.And("there were no reservations for previously created user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("there was a reservation for previously created user lasting from \"1\" days from no" +
                        "w until \"5\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("there was a reservation for previously created user lasting from \"6\" days from no" +
                        "w until \"9\" days from now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "BeginDaysAfterToday",
                            "10"});
                table12.AddRow(new string[] {
                            "EndDaysAfterToday",
                            "16"});
                table12.AddRow(new string[] {
                            "PricePerDay",
                            "10"});
#line 63
 testRunner.And("a NewReservationParameter was created as content for the previously created user " +
                        "and service with name \"Test Villa\" with the following properties", ((string)(null)), table12, "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table13.AddRow(new string[] {
                            "HttpMethod",
                            "post"});
                table13.AddRow(new string[] {
                            "RelativeResourceUrl",
                            "/api/GeneralService/CreateReservationForUser"});
                table13.AddRow(new string[] {
                            "CookieEmail",
                            "testvillaowner@gmail.com"});
#line 69
 testRunner.When("a request is sent to the API", ((string)(null)), table13, "When ");
#line hidden
#line 75
 testRunner.Then("a \"200\" status code should be received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.And("there should be a new reservation based on sent content created for the previousl" +
                        "y created user and service with name \"Test Villa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
